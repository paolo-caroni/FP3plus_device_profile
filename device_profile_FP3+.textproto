# This is my first try to create an optimized FP3+ device profile.
# I have started from original "device_profile_max_compatibility.textproto"
# See https://github.com/tomthecarrot/arcore-for-all/issues/139
# for hints at using this file.
# The licence of this file is unclear, about my modification are released under public domain.
cameras {
  # Android camera ID of the back-facing camera.
  # Camera 0 rear/back-facing camera.
  # Values for FP3+ module (Samsung S5KGM1SP03-FGX9)
  # NOT for FP3 module (IMX363)
  camera_id: "0"
  camera_direction: REAR_FACING
  # https://semiconductor.samsung.com/image-sensor/mobile-image-sensor/isocell-bright-gm1/
  # Shutter Type Electronic Rolling Shutter and Global Reset
  # maybe can be a problem, see:
  # https://forum.fairphone.com/t/fairphone-3-increase-camera-exposure-time-camera-manual-controls/71914/8
  # ToDo: Verify rolling_shutter_readout_time_nanoseconds, maybe try to copy Pixel 3a value
  rolling_shutter_readout_time_nanoseconds: 33333333
  rolling_shutter_direction: POS_Y_READOUT
  camera_timestamp_alignment_nanoseconds: 0
  calibrated_width: 640
  calibrated_height: 480
  calibrated_focal_length {
    # Focal length is measured in pixels.
    # f1.79 aperture https://en.wikipedia.org/wiki/F-number
    # On FP3+ we have a wide-angle 84,2°
    # https://learnopencv.com/camera-calibration-using-opencv/
    # https://docs.opencv.org/3.4/d4/d94/tutorial_camera_calibration.html
    # https://docs.opencv.org/4.x/dc/dbb/tutorial_py_calibration.html
    # For first calibration I have used boofCV with Brown Model
    # https://boofcv.org/index.php?title=Applications#Camera_Calibration
	# ToDo: test also Kannala-Brandt Model, Universal Omni Model
    x: 490.36174868875696
    y: 491.05467308763616
  }
  calibrated_principal_point {
    # For first calibration I have used boofCV with Brown Model
    # ToDo: test also Kannala-Brandt Model, Universal Omni Model
    x: 320.30753731196995
    y: 238.84110117426735
  }
  distortion_poly3 {
    # Max compatibility profile values 0.0
    # https://en.wikipedia.org/wiki/Distortion_(optics)
    # https://lensfun.github.io/calibration-tutorial/lens-distortion.html
    # ToDo: Verify with lensfun with DistortionModel poly3.
    # not actually supported https://wilson.bronger.org/lensfun_coverage.html
    # ToDo: Upload calibration pictures https://wilson.bronger.org/calibration
    # It seems also that can be done with Blender that will give k1=k0, k2=k1 and k3=k2 (I suppose)
    # https://blender.stackexchange.com/questions/15620/how-to-determine-lens-undistortion-values-for-motion-tracking
    # ToDo: Try to use Blender (that use algorithms based on OpenCV)
    k0: 0.0
    k1: 0.0
    k2: 0.0
  }
  # Also possible: END_OF_EXPOSURE
  exposure_timestamp_meaning: BEGINNING_OF_EXPOSURE
  stream_groups {
    streams {
      stream_types {
        usage: FEATURE_TRACKING
        ordinal: 0
      }
      format: YUV_420_888
      supported_resolutions {
        width: 640
        height: 480
      }
    }
    streams {
      stream_types {
        usage: AUXILIARY_CV
        ordinal: 0
      }
      format: YUV_420_888
      supported_resolutions {
        width: 640
        height: 480
      }
      # Additional CPU texture resolutions.  On most devices 16:9 resolutions
      # will work, however some devices need these to be 4:3 for things to work
      # well.
      supported_resolutions {
        width: 1280
        height: 720
      }
      supported_resolutions {
        width: 1920
        height: 1080
      }
	# ToDo: Improve supported_resolutions
	#supported_resolutions {
        #width: 3840
        #height: 2160
      #}
        # Max video resolution 4000 x 3000 (4K UHD)
        #supported_resolutions {
        #width: 4000
        #height: 3000
      #}
    }
    streams {
      stream_types {
        usage: AR_PASSTHROUGH
        ordinal: 0
      }
      format: PRIVATE
      # Resolution of the texture.  On most devices 1920x1080 will work, however
      # some devices need this to be 4:3 for things to work well.  Suggested
      # resoltuions to try are 2048x1536 and 1920x1440.
      supported_resolutions {
        width: 1920
        height: 1080
      }
    }
    supported_frame_rates {
      # https://shop.fairphone.com/en/fairphone-3-camera-plus-module
      # 4K video @ 30fps
      # 1080p @ 120fps
      # 720p @ 30fps
      # https://semiconductor.samsung.com/image-sensor/mobile-image-sensor/isocell-bright-gm1/
      # Normal Frame Rate Up to 30fps @12M full
      # Video Frame Rate Up to 120fps @FHD, 240fps @HD
      # It seems that Normal frame rate should be used.
      min_fps: 30
      max_fps: 30
    }
  }
  # Changing to TRUSTED_AS_BOOTTIME may improve performance on some devices.
  # ToDo: Verify.
  camera_timebase_trust_level: TRUSTED_AS_BOOTTIME
  # Changing to IMAGE_METADATA will improve performance on most devices.
  # ToDo: Verify.
  rolling_shutter_data_source: DEVICE_PROFILE
  # FP3+ rear-facing camera should support depth API, since the Pixel 3a support it,
  # not clear if need other config... or better CPU or other hardware in addition.
  # ToDo: try DEPTH_API_SUPPORT_MODE_SUPPORTED
  depth_api_support_mode: DEPTH_API_SUPPORT_MODE_UNSUPPORTED
}
cameras {
  # Camera 1 front-facing.
  # Values for FP3+ module (Samsung S5K3P9SP)
  # NOT for FP3 module (S5K4H7YX)
  camera_id: "1"
  camera_direction: FRONT_FACING
  rolling_shutter_readout_time_nanoseconds: 33333333
  rolling_shutter_direction: POS_Y_READOUT
  calibrated_width: 640
  calibrated_height: 480
  calibrated_focal_length {
    # f2.0 aperture https://en.wikipedia.org/wiki/F-number
    # Is a wide-angle 79,7°
    # For first calibration I have used boofCV with Brown Model
    # (Honestly I'm not interested in this sensor).
    # ToDo: test also Kannala-Brandt Model, Universal Omni Model
    x: 496.6694779022604
    y: 495.27435871040217
  }
  calibrated_principal_point {
    # For first calibration I have used boofCV with Brown Model
    # ToDo: test also Kannala-Brandt Model, Universal Omni Model
    x: 320.7293325152081
    y: 244.31370952046186
  }
  distortion_poly3 {
    # Max compatibility profile values 0.0
    # https://lensfun.github.io/calibration-tutorial/lens-distortion.html
    # ToDo: Verify with lensfun with DistortionModel poly3.
    # not actually supported https://wilson.bronger.org/lensfun_coverage.html
    k0: 0.0
    k1: 0.0
    k2: 0.0
  }
  exposure_timestamp_meaning: BEGINNING_OF_EXPOSURE
  stream_groups {
    streams {
      stream_types {
        usage: FEATURE_TRACKING
        ordinal: 0
      }
      stream_types {
        usage: AUXILIARY_CV
        ordinal: 0
      }
      format: YUV_420_888
      supported_resolutions {
        width: 640
        height: 480
      }
    }
    streams {
      stream_types {
        usage: AR_PASSTHROUGH
        ordinal: 0
      }
      format: PRIVATE
      supported_resolutions {
        width: 1920
        height: 1080
      }
    }
    supported_frame_rates {
      # https://semiconductor.samsung.com/image-sensor/mobile-image-sensor/isocell-bright-3p9/
      # Normal Frame Rate Up to 30fps @full
      # Video Frame Rate  Up to 60fps @4MP (SN, SP), 180fps @VGA (SX)
      # It seems that Normal frame rate should be used.
      # ToDo: Verify (Honestly I'm not interested in this sensor).
      min_fps: 10
      max_fps: 30
    }
  }
  # Changing to TRUSTED_AS_BOOTTIME may improve performance on some devices.
  # ToDo: Verify.
  camera_timebase_trust_level: RUNTIME_CHECK_REQUIRED
  # Changing to IMAGE_METADATA will improve performance on most devices.
  # ToDo: Verify.
  rolling_shutter_data_source: DEVICE_PROFILE
  depth_api_support_mode: DEPTH_API_SUPPORT_MODE_UNSUPPORTED
}
imus {
  key: 100
  value {
    # accel and gyro on FP3+ is a TDK ICM20602
    # ToDo: verify settings, not sure how to do it.
    gyro_scale {
      x: 1.0
      y: 1.0
      z: 1.0
    }
    gyro_misalignment {
      x: 0.0
      y: 0.0
      z: 0.0
    }
    accel_scale {
      x: 1.0
      y: 1.0
      z: 1.0
    }
    accel_misalignment {
      x: 0.0
      y: 0.0
      z: 0.0
    }
    gyro_q_accel {
      w: 1.0
      x: 0.0
      y: 0.0
      z: 0.0
    }
    # These are generous placeholders used in most official devices profiles.
    gyro_noise_sigma: 0.0005309
    gyro_bias_sigma: 0.0001413
    accel_noise_sigma: 0.0048836
    accel_bias_sigma: 0.0125893
    default_gyro_bias {
      x: 0.0
      y: 0.0
      z: 0.0
    }
    default_accel_bias {
      x: 0.0
      y: 0.0
      z: 0.0
    }
    gyro_timestamp_alignment_nanoseconds: 0
    accel_timestamp_alignment_nanoseconds: 0
    # Changing to GYROSCOPE_UNCALIBRATED will improve performance on most
    # devices.
    # ToDo: try GYROSCOPE_UNCALIBRATED and GYROSCOPE_CALIBRATED differences.
    gyro_type: GYROSCOPE_UNCALIBRATED
  }
}
camera_extrinsics {
  frame_id: IMU_0
  # Same as camera ID in REAR_FACING cameras block.
  camera_id: "0"
  frame_t_camera {
    p {
      x: 0.0
      y: 0.0
      z: 0.0
    }
    q {
      # On devices with the back-facing camera mounted differently this may need
      # to be changed, usually just making the x term positive.
      w: 0.0
      x: -0.70710678118654746
      y: 0.70710678118654746
      z: 0.0
    }
  }
}
camera_extrinsics {
  frame_id: IMU_0
  # Same as camera ID in FRONT_FACING cameras block.
  camera_id: "1"
  frame_t_camera {
    p {
      x: 0
      y: 0
      z: 0
    }
    q {
      # On devices with the front-facing camera mounted differently this may
      # need to be changed, usually just making the z term positive.
      w: 0.70710678118654746
      x: 0
      y: 0
      z: -0.70710678118654746
    }
  }
}
general_extrinsics {
  frame_a_id: IMU_0
  frame_b_id: CAMERA_ID_MOTION_TRACKING_PRIMARY
  a_t_b {
    # Copy from extrinsics for back-facing camera above.
    p {
      x: 0.0
      y: 0.0
      z: 0.0
    }
    q {
      w: 0.0
      x: -0.70710678118654746
      y: 0.70710678118654746
      z: 0.0
    }
  }
}
general_extrinsics {
  frame_a_id: ANDROID_FRAME
  frame_b_id: OPENGL
  a_t_b {
    p {
      x: 0
      y: 0
      z: 0
    }
    q {
      w: 0.70710678118654757
      x: 0
      y: 0
      z: 0.70710678118654746
    }
  }
}
general_extrinsics {
  frame_a_id: IMU_0
  frame_b_id: ANDROID_FRAME
  a_t_b {
    p {
      x: 0
      y: 0
      z: 0
    }
    q {
      w: 1
      x: 0
      y: 0
      z: 0
    }
  }
}
general_extrinsics {
  frame_a_id: IMU_0
  frame_b_id: CAMERA_ID_FRONT_MOTION_TRACKING_PRIMARY
  a_t_b {
    # Copy from extrinsics for front-facing camera above.
    p {
      x: 0
      y: 0
      z: 0
    }
    q {
      w: 0.70710678118654746
      x: 0
      y: 0
      z: -0.70710678118654746
    }
  }
}
